Opgave 1.1
Schrijf een Java-programma dat een instelbaar aantal gehele getallen genereert en deze in een array
plaats. Sorteer deze getallen met behulp van bubble sort.
Bepaal nu hoeveel tijd je programma nodig heeft om de array te sorteren. Test je programma in ieder
geval 25.000, 50.000, 100.000, 200.000 en 400.000 getallen en toon de resultaten in je verslag. Wat
valt je op aan de resultaten?
Om betrouwbare meetresultaten te krijgen, raden we je aan om steeds meerdere metingen te doen
(door in je programma het sorteeralgoritme meerdere keren uit te voeren) en daarna het gemiddelde
van de metingen te nemen, met uitzondering van de laagste en de hoogste meting.
Toon je meetresultaten in je rapport in een overzichtelijke tabel.

Opdracht 1.2
Doe hier hetzelfde als in opdracht 1.1, maar splits nu de array vóór het sorteren in twee helften. Sorteer
elke array daarna (achterelkaar, in dezelfde thread). Na het sorteren moet je de twee gesorteerde
lijsten uiteraard weer samenvoegen.
Hoeveel tijd was er nu nodig voor het sorteren? Welke relatie is er tussen deze meetresultaten en die
van de vorige opdracht? Hoe verklaar je dit?
2

Opdracht 1.3
Doe hier hetzelfde als in opdracht 1.2, maar laat nu de twee helften van de array door 2 threads
uitvoeren die ieder hun eigen helft sorteren. De main thread kan daarna de gesorteerde helften weer
samenvoegen tot één gesorteerde array.
Hoeveel tijd was er nu nodig voor het sorteren? Wat is de relatie tussen deze meetresultaten en die
van de vorige twee opdrachten? Hoe verklaar je dit?

Opdracht 1.4
Maak nu een programma waarin bij het sorteren van de array deze weer in twee helften wordt gesplitst
zoals in opdracht 1.2. Start ook nu voor elke helft weer een thread, waarbij elke thread verantwoordelijk
is voor het sorteren van zijn deel van de lijst.
Dit keer echter bekijkt de thread hoeveel nummers er gesorteerd moeten worden. Is dit meer dan een
bepaalde drempelwaarde, dan zal de thread 2 nieuwe threads aanmaken die ieder weer één helft van
de lijst sorteren. Zijn die threads klaar, dan voegt de thread de twee (gesorteerde) arrays weer samen.
Op die manier ontstaat dus een ‘boom’ van actieve threads.
Threads die hun werk niet gaan ‘outsourcen’ sorteren de arrays weer met bubble sort.
Experimenteer nu met de drempelwaarde waarbij een thread het werk gaat uitbesteden aan twee
nieuwe threads. Print steeds weer uit hoe lang het duurt om de array te sorteren.
Toon je resultaten in een grafiek en beantwoord de volgende vragen:
• Vanaf welk punt leverde het verlagen van de drempelwaarde geen verbetering in snelheid
meer op?
• Kan je dit verklaren?
• Wat zorgt ervoor dat het werk bij bepaalde drempelwaarden sneller kan worden gedaan?
Waarom heeft het na verloop van tijd geen zin meer om de drempelwaarde te verlagen?

Opdracht 1.5
De vorige opdracht was een typisch voorbeeld van een divide-and-conquer strategie om een probleem
op te lossen. Java heeft een speciaal framework om dit soort oplossingen te implementeren:
RecursiveTask in combinatie met een ForkJoin-threadpool.
Maak een versie van je programma waarbij je niet zelf de threads maakt (zoals in opdracht 1.4), maar
een ForkJoin threadpool gebruikt, samen met de RecursiveTask.
Bepaal nu weer hoe lang je programma nodig heeft om te sorteren. Hoe vergelijken de tijden met die
van opdracht 1.4? Hoeveel threads denk je dat gebruikt worden door de ForkJoin-pool (leg uit waarom
je dat denkt)?
In te leveren via Blackboard:
1. Een verslag met daarin het ontwerp van je software, de resultaten van je metingen en de
antwoorden op de vragen gesteld in de opdracht.
Dit verslag moet voorzien zijn van een titelblad, een duidelijke opmaak hebben en weinig tot
geen spelfouten bevatten.
Zorg dat je bij grafieken duidelijk aangeeft welke schaal je hanteert (bv. lineair vs. nonlineair). Gebruik je een non-lineaire schaal gebruikt, licht dan ook toe waarom.
Geef ook aan wat de specificaties zijn van de computer waarop je testte.
2. Een zip-file met daarin je IntelliJ project. Geef je project de naam
<LastNameStudent1><LastNameStudent2>Assignment1.
N.B.: Gebruik deze naamgeving en niets anders